#!/bin/bash

set -o nounset -o pipefail -o errexit

SCRIPT_DIR=$(readlink -f "$0" | xargs dirname)
ROOT=${ROOT-$SCRIPT_DIR/..}
VERSION_FILE=${VERSION_FILE-.version}

OUTPUT=${OUTPUT-/dev/stdout}
ACTION=c
while getopts "o:cCip-" OPT; do
    case $OPT in
        o) OUTPUT=$OPTARG ;;
        c) ACTION=c ;;
        C) ACTION=compare ;;
        i) ACTION=i ;;
        p) ACTION=p ;;
        -) break ;;
        ?) exit 2 ;;
    esac
done
shift $((OPTIND-1))

if [ "$ACTION" = "i" ]; then
    echo "$ROOT/$VERSION_FILE" > "$OUTPUT"
    exit 0
elif [ "$ACTION" = "p" ]; then
    . <("$SCRIPT_DIR/build-info" -e)
    echo "$BUILD_VERSION" > "$OUTPUT"
    exit 0
elif [ "$ACTION" = "compare" ]; then
    set +o errexit
    diff -c3 <(git show HEAD^:"$VERSION_FILE") "$ROOT/$VERSION_FILE" 1>&2
    EC=$?
    set -o errexit
    if [ "$EC" -eq 0 ]; then
       echo 1>&2 "version not updated"
       exit 1
    else
       echo 1>&2 "version has changed"
       exit 0
    fi
fi

TMP=$(mktemp)
trap 'rm -f $TMP' EXIT

"$SCRIPT_DIR/build-info" -c > "$TMP"
cat <<EOF >> "$TMP"

static void print_version(const char* prog)
{
    printf("%s (%s.%s.%s)\\n",
           prog,
           BUILD_VERSION_MAJOR,
           BUILD_VERSION_MINOR,
           BUILD_VERSION_PATCH);
    printf("url %s\\n", BUILD_REPO_URL);
    printf("gitref %s%s\\n", BUILD_GIT_REF, BUILD_GIT_DIRTY[0] ? " (dirty)" : "");

#ifdef PY_VERSION
    printf("python %s\\n", PY_VERSION);
#endif

#ifdef LUA_VERSION_MAJOR
    printf("lua %s.%s.%s\\n", LUA_VERSION_MAJOR, LUA_VERSION_MINOR, LUA_VERSION_RELEASE);
#endif

#ifdef NODE_MAJOR_VERSION
    printf("node %d.%d.%d\\n", NODE_MAJOR_VERSION, NODE_MINOR_VERSION, NODE_PATCH_VERSION);
#endif

#ifdef NODE_PATCH_VERSION
    if(NODE_PATCH_VERSION > 0) {
        printf("v8 %d.%d.%d.%d\\n", V8_MAJOR_VERSION, V8_MINOR_VERSION, V8_BUILD_NUMBER, V8_PATCH_LEVEL);
    } else {
        printf("v8 %d.%d.%d\\n", V8_MAJOR_VERSION, V8_MINOR_VERSION, V8_BUILD_NUMBER);
    }
#endif

    printf("buildtime %s\\n", BUILD_TIME);
}
EOF

cp "$TMP" "$OUTPUT"
