#!/bin/bash

set -o nounset -o pipefail -o errexit

TOOLS=${TOOLS-$(readlink -f "$0" | xargs dirname)}

TEST_ROOT=${TEST_ROOT-$PWD}
PARENT_PROJECT=${PARENT_PROJECT-$(basename "$TEST_ROOT")}
TEST_RUNNER=${TEST_RUNNER-$TOOLS/test-runner}
TEST_OUTPUT_DIR=${TEST_OUTPUT_DIR-}
TEST_RESULT_BUNDLE=${TEST_RESULT_BUNDLE-}
VERBOSE=${VERBOSE-1}
SHOW_IDS=${SHOW_IDS-}
while getopts "c:r:o:qvV-" OPT; do
    case $OPT in
        c) TEST_ROOT=$OPTARG ;;
        r) TEST_RESULT_BUNDLE=$OPTARG ;;
        o) TEST_OUTPUT_DIR=$OPTARG ;;
        q) VERBOSE= ;;
        v) VERBOSE=1 ;;
        V) VERBOSE=2 ;;
        -) break ;;
        ?) exit 2 ;;
    esac
done
shift $((OPTIND-1))

. <("$TOOLS/build-info" -e || cat /dev/null)

DEFAULT="\033[0m"
BLACK="\033[30m"
RED="\033[31m"
GREEN="\033[32m"

uuid() {
    python3 -c 'import uuid; print(uuid.uuid4())'
}

poor_jq() {
    python3 -c "import json, sys; print(json.load(sys.stdin)$1)" < "$2"
}

ID=$(uuid)
if [ -n "$SHOW_IDS" ] || [ "$VERBOSE" = "2" ]; then
    echo "test run: $ID"
fi

TMP=$(mktemp -d)
trap 'rm -rf $TMP' EXIT

BUNDLE_ROOT=$TMP/$PARENT_PROJECT-tests-$ID
mkdir -p "$BUNDLE_ROOT"

mapfile -t TESTS < <(env TEST_ROOT="$TEST_ROOT" $TEST_RUNNER)

N=0
F=0
S=0
for t in "${TESTS[@]}"; do
    export TEST_RUN_ID=$(uuid)
    RUN=$TMP/$TEST_RUN_ID.json

    set +o errexit
    env PARENT_RUN_ID="$ID" $TEST_RUNNER --very-quiet --output="$RUN" "$t"
    set -o errexit

    PROJECT=$(poor_jq '["test"]["project"]' "$RUN")
    NAME=$(poor_jq '["test"]["name"]' "$RUN")

    cp "$RUN" "$BUNDLE_ROOT/$PROJECT.$NAME.$TEST_RUN_ID.json"

    N=$((N+1))
    if [ "$(poor_jq '["result"]' "$RUN")" = "True" ]; then
        S=$((S+1))
        echo -ne "[ ${GREEN}OK${DEFAULT} ] "
    else
        F=$((F+1))
        echo -ne "[${RED}FAIL${DEFAULT}] "
    fi

    if [ -n "$SHOW_IDS" ] || [ "$VERBOSE" = "2" ]; then
        echo "$PROJECT $NAME ($TEST_RUN_ID)"
    else
        echo "$PROJECT $NAME"
    fi

    if ([ "$VERBOSE" = "1" ] && [ "$(poor_jq '["result"]' "$RUN")" != "True" ]) \
        || [ "$VERBOSE" = "2" ]; then
        sed 's/^/       /' < "$RUN"
        echo
    fi
done

cat > "$BUNDLE_ROOT/run.json" <<EOF
{
    "when": "$(date -Is)",
    "n": $N, "s": $S, "f": $F
EOF
if [ -n "${BUILD_GIT_REF-}" ]; then
cat >> "$BUNDLE_ROOT/run.json" <<EOF
    "git":
        "ref": "${BUILD_GIT_REF}",
        "dirty": $([ -n "$BUILD_GIT_DIRTY" ] && echo true || echo false)
    },
EOF
fi
cat > "$BUNDLE_ROOT/run.json" <<EOF
}
EOF

if [ -z "$TEST_RESULT_BUNDLE" ] && [ -n "$TEST_OUTPUT_DIR" ]; then
    TEST_RESULT_BUNDLE=$TEST_OUTPUT_DIR/$(basename "$BUNDLE_ROOT").tar.gz
fi

if [ -n "$TEST_RESULT_BUNDLE" ]; then
    mkdir -p "$(dirname "$TEST_RESULT_BUNDLE")"
    tar -cf "$TEST_RESULT_BUNDLE" \
        -C "$(dirname "$BUNDLE_ROOT")" "$(basename "$BUNDLE_ROOT")"
fi

if [ "$N" -eq "$S" ]; then
    echo -e "${GREEN}$N${DEFAULT} tests run"
else
    echo -e "$N tests run: ${GREEN}$S${DEFAULT} successfully, ${RED}$F${DEFAULT} failed"
    exit 1
fi
