#!/bin/bash

set -o nounset -o pipefail -o errexit

SCRIPT_DIR=$(readlink -f "$0" | xargs dirname)
ROOT=${ROOT-$SCRIPT_DIR/..}
VERSION_FILE=${VERSION_FILE-$ROOT/.version}

STYLE=env
OUTPUT=/dev/stdout
PREFIX=BUILD_
TARBALL_SUFFIX=.tar.gz
while getopts "ceo:p:z-" OPT; do
    case $OPT in
        c) STYLE=c ;;
        e) STYLE=env ;;
        o) OUTPUT=$OPTARG ;;
        p) PREFIX=$OPTARG ;;
        -) break ;;
        ?) exit 2 ;;
    esac
done
shift $((OPTIND-1))

out() {
    cat >> "$OUTPUT"
}

kv() {
    if [ "$STYLE" = "env" ]; then
    out <<EOF
$PREFIX$1="$2"
EOF
    elif [ "$STYLE" = "c" ]; then
    out <<EOF
#define $PREFIX$1 "$2"
EOF
    else
        echo 1>&2 "unknown style: $STYLE"
        exit 1
    fi
}

. "$VERSION_FILE"
kv "VERSION_MAJOR" "$VERSION_MAJOR"
kv "VERSION_MINOR" "$VERSION_MINOR"
kv "VERSION_PATCH" "$VERSION_PATCH"
kv "VERSION" "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"

if [ -f "$ROOT/.build.env" ]; then
    . "$ROOT/.build.env"
elif [ -n "${CI-}" ]; then
    GIT_REF=$GITHUB_SHA
    GIT_DIRTY= # HACK: assumption
    GIT_REPO=$GITHUB_REPOSITORY
    REPO_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY
    SOURCE_TARBALL_URL=$REPO_URL/archive/$GIT_REF$TARBALL_SUFFIX
elif command -v git > /dev/null \
    && git rev-parse --show-toplevel >/dev/null 2>&1; then
    GIT_REF=$(git rev-parse HEAD)
    GIT_DIRTY=$([ -n "$(git status --porcelain)" ] && echo "1" || echo)

    ORIGIN=$(git remote get-url origin)
    DOMAIN=github.com
    if grep -cq "^git@$DOMAIN:" <<< "$ORIGIN"; then
        GIT_REPO=$(sed 's/^git@'"$DOMAIN"':\(.*\).git$/\1/' <<< "$ORIGIN")
        REPO_URL=https://$DOMAIN/$GIT_REPO
        SOURCE_TARBALL_URL=$REPO_URL/archive/$GIT_REF$TARBALL_SUFFIX
    elif grep -cq "^https://$DOMAIN/" <<< "$ORIGIN"; then
        GIT_REPO=$(sed 's,^https://'"$DOMAIN"'/\(.*\)\(.git\)\?$,\1,' <<< "$ORIGIN")
        REPO_URL=https://$DOMAIN/$GIT_REPO
        SOURCE_TARBALL_URL=$REPO_URL/archive/$GIT_REF$TARBALL_SUFFIX
    else
        echo 1>&2 "unable to figure out repository url"
        exit 1
    fi
else
    echo 1>&2 "unable to figure out build context"
    exit 1
fi

kv "PROJECT" "$(basename "$GIT_REPO")"
kv "GIT_REPO" "$GIT_REPO"
kv "GIT_REF" "$GIT_REF"
kv "GIT_DIRTY" "$GIT_DIRTY"
kv "REPO_URL" "$REPO_URL"
kv "SOURCE_TARBALL_URL" "$SOURCE_TARBALL_URL"

kv "TIME" "$(date -Is)"
kv "TIME_RFC5322" "$(date --rfc-email)"

if command -v git > /dev/null; then
    GIT_USER_NAME=$(git config user.name)
    GIT_USER_EMAIL=$(git config user.email)

    if [ -z "$GIT_USER_NAME" ]; then
        GIT_USER_NAME=$(git --no-pager log --format=format:'%an\n' -n 1)
    fi

    if [ -z "$GIT_USER_EMAIL" ]; then
        GIT_USER_EMAIL=$(git --no-pager log --format=format:'%ae\n' -n 1)
    fi

    kv "GIT_USER_NAME" "$GIT_USER_NAME"
    kv "GIT_USER_EMAIL" "$GIT_USER_EMAIL"
fi
