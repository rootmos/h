#!/usr/bin/env python3

import argparse
import datetime
import json
import logging
import os
import subprocess
import sys
import tempfile

def parse_args():
    parser = argparse.ArgumentParser(description="Yet another test runner")

    parser.add_argument("--log", default=os.environ.get("LOG_LEVEL", "WARN"), help="set log level")

    parser.add_argument("--trace", action="store_true")

    parser.add_argument("input", metavar="INPUT")

    return parser.parse_args()

logger = None
def setup_logger(level):
    l = logging.getLogger("test-runner")
    l.setLevel(level)

    ch = logging.StreamHandler()
    ch.setLevel(level)

    f = logging.Formatter(
        fmt="%(asctime)s:%(name)s:%(levelname)s %(message)s",
        datefmt="%Y-%m-%dT%H:%M:%S%z")
    ch.setFormatter(f)

    l.addHandler(ch)

    return l

if __name__ == "__main__":
    args = parse_args()
    logger = setup_logger(args.log.upper())
    logger.debug(f"args: {args}")

    fn = args.input

    if os.path.isdir(fn):
        test_metafile = os.environ.get("TEST_METAFILE", "test.json")
        fn = os.path.join(fn, test_metafile)
    logger.info(f"test file: {fn}")

    with open(fn, "r") as f:
        t = json.load(f)
    logger.debug(f"test spec: {t}")

    res = {}

    res["root"] = root = os.path.dirname(fn)
    logger.debug(f"test root: {root}")

    name = t.get("name")
    if name is None:
        name = os.path.basename(root)
    res["name"] = name
    logger.debug(f"test name: {name}")

    project_root = os.environ.get("PROJECT_ROOT")
    if project_root is None:
        project_root = os.path.realpath(os.path.dirname(os.path.dirname(root)))
    res["project_root"] = project_root
    res["project"] = os.environ.get("PROJECT", os.path.basename(project_root))

    sut = os.environ.get("SUT")
    if sut is None:
        exe = os.environ.get("EXE")
        if exe is None:
            exe = os.path.basename(project_root)

        sut = os.path.join(project_root, exe)
    res["sut"] = sut
    logger.debug(f"test sut: {sut}")

    input_ = os.path.realpath(os.path.join(root, t.get("input")))
    res["input"] = input_
    logger.debug(f"test input: {input_}")

    cmdline = []
    if args.trace:
        trace = tempfile.NamedTemporaryFile()
        cmdline += ["strace", "-o", trace.name]
    else:
        trace = None
    cmdline.append(sut)
    cmdline += t.get("args", [])
    cmdline.append(input_)
    res["cmdline"] = cmdline

    res["when"] = datetime.datetime.now().astimezone().isoformat(timespec="seconds")
    p = subprocess.run(cmdline, capture_output=True, cwd=root)

    res["stdout"] = p.stdout.decode("UTF-8")
    res["stderr"] = p.stderr.decode("UTF-8")
    res["returncode"] = p.returncode
    res["expected_returncode"] = expected_exit = t.get("exit", 0)
    if trace:
        trace.seek(0)
        res["trace"] = trace.read().decode("UTF-8")

    expected_stdout_fn = t.get("stdout")
    if expected_stdout_fn is None:
        expected_stdout_fn = os.path.join(root, "stdout")
        if not os.path.exists(expected_stdout_fn):
            expected_stdout_fn = None
    if expected_stdout_fn is not None:
        logger.debug(f"expected stdout from: {expected_stdout_fn}")
        res["expected_stdout_fn"] = expected_stdout_fn

        with open(expected_stdout_fn, "rb") as f:
            expected_stdout = f.read()
            res["expected_stdout"] = expected_stdout.decode("UTF-8")
    else:
        expected_stdout = None

    res["result"] = True
    res["messages"] = []

    if p.returncode != expected_exit:
        res["result"] = False
        res["messages"].append("unexpected exit status")

    if expected_stdout is not None and expected_stdout != p.stdout:
        res["result"] = False
        res["messages"].append("stdout mismatch")

    print(json.dumps(res))
    sys.exit(0 if res["result"] else 1)
